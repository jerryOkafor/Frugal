# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2

references:
  # Reusable references that will be used in the jobs

  #gradle ke
  gradle_key: &gradle_key
                jars-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}

  #gem key
  gems_key: &gems_key
              gems-{{ checksum "Gemfile.lock" }}

  #restore gradle cache
  restore_gradle_cache: &restore_gradle_cache
    restore_cache:
      key: *gradle_key

  #restore gem cache
  restore_gems_cache: &restore_gems_cache
    restore_cache:
      key: *gems_key

  #save gradle key
  save_gradle_cache: &save_gradle_cache
    save_cache:
      key: *gradle_key
      paths:
        - ~/.gradle
        - ~/.m2

  #save gem key
  save_gems_cache: &save_gems_cache
    save_cache:
      key: *gems_key
      paths:
        - vendor/bundle

  #work space
  workspace: &workspace
               ~/src

  #Android Environment config
  android_config: &android_config
    working_directory: *workspace
    docker:
      - image: circleci/android:api-29
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx2048m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx2048m"'

  #ruby dependencies
  ruby_dependencies: &ruby_dependencies
    run:
      name: Download Ruby Dependencies
      command: bundle check || bundle install --path vendor/bundle

  #Android dependencies
  android_dependencies: &android_dependencies
    run:
      name: Download Android Dependencies
      command: ./gradlew androidDependencies

  # Google Services
  export_gservices_key: &export_gservices_key
    run:
      name: Export Google Services key environment variable
      command: echo 'export GOOGLE_SERVICES_KEY="$GOOGLE_SERVICES_KEY"' >> $BASH_ENV
  decode_gservices_key: &decode_gservices_key
    run:
      name: Decode Google Services key
      command: echo $GOOGLE_SERVICES_KEY | base64 -di > app/google-services.json

  #Google Cloud Service
  export_gcloud_key: &export_gcloud_key
    run:
      name: Export Google Cloud Service key environment variable
      command: echo 'export GCLOUD_SERVICE_KEY="$GCLOUD_SERVICE_KEY"' >> $BASH_ENV
  decode_gcloud_key: &decode_gcloud_key
    run:
      name: Decode Google Cloud credentials
      command: echo $GCLOUD_SERVICE_KEY | base64 -di > client-secret.json


jobs:
  ## Run unit tests
  test_unit:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
#      - *export_gservices_key
#      - *decode_gservices_key
      - run:
          name: Run unit tests
          command: bundle exec fastlane unit_tests
      - store_artifacts:
          path: app/build/reports/
          destination: /reports/
      - store_test_results:
          path: app/build/test-results/
          destination: /test-results/

  ## Run instrumentation tests
  test_instrumented:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
#      - *export_gservices_key
#      - *decode_gservices_key
#      - *export_gcloud_key
#      - *decode_gcloud_key
      - run:
          name: Uninstall crcmod
          command: echo "y" | sudo pip uninstall crcmod
      - run:
          name: Install crcmod
          command: sudo pip install -U crcmod
#      - run:
#          name: Run instrumentation tests in Firebase Test Lab
#          command: bundle exec fastlane instrumentation_tests_testlab
      - run:
          name: Run instrumentation tests in AVD
          command: bundle exec fastlane instrumentation_tests
      - store_artifacts:
          path: firebase/
          destination: /firebase/

  ## Generate codecov report
  generate_code_cove_report:
    <<: *android_config
    steps:
      - checkout
      - *restore_gradle_cache
      - *restore_gems_cache
      - *ruby_dependencies
      - *android_dependencies
      - *save_gradle_cache
      - *save_gems_cache
      - *export_gservices_key
      - *decode_gservices_key
      - run:
          name: Generate report
          command: bundle exec fastlane generate_code_report

workflows:
  version: 2
  workflow:
    jobs:
      # Jobs that will run when you push to your repo ...
      - test_unit
      - test_instrumented:
          requires:
            - test_unit
#      - generate_code_cove_report:
#          requires:
#            - test_unit
#            - test_instrumented